"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[515],{26441:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"project/2025/george.apostol1107/index","title":"Project Name","description":"Simon Says Game - Memory Challenge","source":"@site/versioned_docs/version-fils_en/project/2025/george.apostol1107/index.md","sourceDirName":"project/2025/george.apostol1107","slug":"/project/2025/george.apostol1107/","permalink":"/docs/fils_en/project/2025/george.apostol1107/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-fils_en/project/2025/george.apostol1107/index.md","tags":[],"version":"fils_en","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"WaveScope","permalink":"/docs/fils_en/project/2025/genan.omer/"},"next":{"title":"Fan Rotation Detection with Door Control","permalink":"/docs/fils_en/project/2025/george.popazu/"}}');var n=i(74848),s=i(28453);const d={},a="Project Name",o={},l=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Log",id:"log",level:2},{value:"Week 28 Apr - 4 May",id:"week-28-apr---4-may",level:3},{value:"Week 5 - 11 May",id:"week-5---11-may",level:3},{value:"Week 12 - 18 May",id:"week-12---18-may",level:3},{value:"Week 19 - 25 May",id:"week-19---25-may",level:3},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics",level:3},{value:"Bill of Materials",id:"bill-of-materials",level:3},{value:"Software",id:"software",level:2},{value:"Links",id:"links",level:2}];function c(e){const r={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"project-name",children:"Project Name"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"Simon Says Game - Memory Challenge"})}),"\n",(0,n.jsx)(r.admonition,{type:"info",children:(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Author:"})," Apostol George-Robert ",(0,n.jsx)(r.br,{}),"\n",(0,n.jsx)(r.strong,{children:"GitHub Project Link:"}),": ",(0,n.jsx)(r.a,{href:"https://github.com/Apostol-Robert/AMPproject",children:"https://github.com/Apostol-Robert/AMPproject"})]})}),"\n",(0,n.jsx)(r.h2,{id:"description",children:"Description"}),"\n",(0,n.jsx)(r.p,{children:"An interactive memory game where players must remember and replicate increasingly complex sequences of lights on a 3x3 LED grid, using a keypad for input and a buzzer for audio feedback. The game gets harder with every step, and ends when the player makes a mistake."}),"\n",(0,n.jsx)(r.p,{children:"Also, in my childhood I played a game like this, and I actually find it interesting to now be able to build one of the games I used to play when I was little."}),"\n",(0,n.jsx)(r.p,{children:"Additionally, a web interface accessible via WiFi will display real-time scores, enabling players to track progress or compare results on the same network."}),"\n",(0,n.jsx)(r.h2,{id:"motivation",children:"Motivation"}),"\n",(0,n.jsx)(r.p,{children:"I chose this project because I wanted to combine hardware interaction with Rust programming in a fun and visually engaging way. It\u2019s also a good challenge for working with input devices, output displays, and real-time feedback."}),"\n",(0,n.jsx)(r.p,{children:"Moreover, integrating a WiFi-connected web interface gives the project a modern touch, making it accessible and interactive beyond the physical device."}),"\n",(0,n.jsx)(r.h2,{id:"architecture",children:"Architecture"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Game Engine (Rust)"})," \u2013 manages LED sequence generation, user input validation, scoring, and game flow"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Input Module"})," \u2013 receives keypad input"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Output Module"})," \u2013 controls LEDs, buzzer sounds, and optional LCD display"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Random Generator"})," \u2013 provides a new sequence every game"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Feedback System"})," \u2013 audio (buzzer) + optional text (LCD)"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Web Server Module"})," \u2013 serves a minimal website over WiFi where the current game score and history are displayed"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Game Controller"})," \u2013 coordinates everything (input, output, logic, WiFi)"]}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"Keypad \u2500\u252c\u2500> Input Parser\r\n        \u2502\r\n        \u251c\u2500> Game Logic <\u2500\u2500 Random Generator\r\n        \u2502        \u2502\r\n        \u25bc        \u25bc\r\n     LED Grid  Buzzer + LCD\r\n                     \u2502\r\n                     \u25bc\r\n             Web Server Module \u2500\u2500> Web UI\n"})}),"\n",(0,n.jsx)(r.h2,{id:"log",children:"Log"}),"\n",(0,n.jsx)(r.h3,{id:"week-28-apr---4-may",children:"Week 28 Apr - 4 May"}),"\n",(0,n.jsx)(r.p,{children:"During this week, I purchased all the necessary components for the project, including the Raspberry Pi Pico W, 4x4 keypad, LEDs, buzzer, jumper wires, and breadboards. I also finalized the game concept and documented the rules for how the Simon Says game will work. In addition, I designed an initial schematic for organizing the hardware components and planned how the modules (input, output, game logic) will interact. I also decided to build a WiFi-connected web interface to display players' scores."}),"\n",(0,n.jsx)(r.h3,{id:"week-5---11-may",children:"Week 5 - 11 May"}),"\n",(0,n.jsx)(r.h3,{id:"week-12---18-may",children:"Week 12 - 18 May"}),"\n",(0,n.jsx)(r.h3,{id:"week-19---25-may",children:"Week 19 - 25 May"}),"\n",(0,n.jsx)(r.h2,{id:"hardware",children:"Hardware"}),"\n",(0,n.jsx)(r.p,{children:"A Raspberry Pi Pico W microcontroller is used to drive a grid of 9 LEDs arranged in a 3x3 matrix. A 4x4 membrane keypad allows user interaction, and a buzzer provides audio feedback. Two breadboards are used to separate control logic and visual interface for better layout and easier casing. WiFi functionality is used for connecting to a simple web server to display scores."}),"\n",(0,n.jsx)(r.h3,{id:"schematics",children:"Schematics"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.em,{children:"(To be added from KiCad once completed)"})}),"\n",(0,n.jsx)(r.h3,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Device"}),(0,n.jsx)(r.th,{children:"Usage"}),(0,n.jsx)(r.th,{children:"Price"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/12394-raspberry-pi-pico-w.html",children:"Raspberry Pi Pico W"})}),(0,n.jsx)(r.td,{children:"Main microcontroller"}),(0,n.jsx)(r.td,{children:"35 RON"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://www.optimusdigital.ro/en/breadboards/13244-breadboard-175-x-67-x-9-mm.html",children:"Breadboard 830 points"})}),(0,n.jsx)(r.td,{children:"For LED matrix and keypad"}),(0,n.jsx)(r.td,{children:"~15 RON"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://www.optimusdigital.ro/en/breadboards/13244-breadboard-175-x-67-x-9-mm.html",children:"Breadboard 830 points"})}),(0,n.jsx)(r.td,{children:"For Pico, buzzer and wiring"}),(0,n.jsx)(r.td,{children:"~15 RON"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://www.optimusdigital.ro/ro/senzori-senzori-de-atingere/470-tastatura-matriceala-4x4-cu-conector-pin-de-tip-mama.html",children:"4x4 Keypad Matrix"})}),(0,n.jsx)(r.td,{children:"Main input method"}),(0,n.jsx)(r.td,{children:"~7 RON"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"LEDs (9x)"}),(0,n.jsx)(r.td,{children:"Visual output"}),(0,n.jsx)(r.td,{children:"~5 RON"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://www.optimusdigital.ro/ro/audio-buzzere/12247-buzzer-pasiv-de-33v-sau-3v.html",children:"Buzzer"})}),(0,n.jsx)(r.td,{children:"Audio feedback"}),(0,n.jsx)(r.td,{children:"~1 RON"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Jumper wires"}),(0,n.jsx)(r.td,{children:"Wiring between components"}),(0,n.jsx)(r.td,{children:"~5 RON"})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"software",children:"Software"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Library"}),(0,n.jsx)(r.th,{children:"Description"}),(0,n.jsx)(r.th,{children:"Usage"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://github.com/rp-rs/rp2040-hal",children:"rp2040-hal"})}),(0,n.jsx)(r.td,{children:"HAL for RP2040"}),(0,n.jsx)(r.td,{children:"Controls GPIO, timers, etc"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://github.com/rust-embedded/embedded-hal",children:"embedded-hal"})}),(0,n.jsx)(r.td,{children:"Hardware abstraction"}),(0,n.jsx)(r.td,{children:"Common interface to GPIO, I2C, etc"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://github.com/japaric/heapless",children:"heapless"})}),(0,n.jsx)(r.td,{children:"No-std data structures"}),(0,n.jsx)(r.td,{children:"Used for storing sequences"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"https://github.com/rust-embedded/panic-halt",children:"panic-halt"})}),(0,n.jsx)(r.td,{children:"Panic behavior"}),(0,n.jsx)(r.td,{children:"Required in embedded context"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.a,{href:"https://github.com/smol-rs/smol",children:"tiny-httpd or smol"})," (optional)"]}),(0,n.jsx)(r.td,{children:"Lightweight web server"}),(0,n.jsx)(r.td,{children:"Serve the score page over WiFi"})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"links",children:"Links"})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,r,i)=>{i.d(r,{R:()=>d,x:()=>a});var t=i(96540);const n={},s=t.createContext(n);function d(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);