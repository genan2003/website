"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1964],{50481:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"project/2025/andrei.ciucan/index","title":"Smart Light Piano","description":"Digital piano project built on a Raspberry Pi Pico 2W, featuring auto-light detection, multi-mode play and optional Wi-Fi integration.","source":"@site/versioned_docs/version-acs_cc/project/2025/andrei.ciucan/index.md","sourceDirName":"project/2025/andrei.ciucan","slug":"/project/2025/andrei.ciucan/","permalink":"/docs/acs_cc/project/2025/andrei.ciucan/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-acs_cc/project/2025/andrei.ciucan/index.md","tags":[],"version":"acs_cc","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tic-Tac-Toe","permalink":"/docs/acs_cc/project/2025/andrei.cirstescu/"},"next":{"title":"RoboKart","permalink":"/docs/acs_cc/project/2025/andrei.girleanu/"}}');var i=r(74848),n=r(28453);const d={},o="Smart Light Piano",l={},a=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Log",id:"log",level:2},{value:"Week 23 - 30 April",id:"week-23---30-april",level:3},{value:"Week 5 - 11 May",id:"week-5---11-may",level:3},{value:"Week 12 - 18 May",id:"week-12---18-may",level:3},{value:"Week 19 - 25 May",id:"week-19---25-may",level:3},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics",level:3},{value:"Photos",id:"photos",level:3},{value:"Software",id:"software",level:2},{value:"Detailed Design",id:"detailed-design",level:3},{value:"Functional Diagram",id:"functional-diagram",level:3},{value:"Bill of Materials",id:"bill-of-materials",level:2},{value:"Hardware",id:"hardware-1",level:3},{value:"Total: 161 RON",id:"total-161-ron",level:4},{value:"Software",id:"software-1",level:3},{value:"Links",id:"links",level:2}];function h(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"smart-light-piano",children:"Smart Light Piano"})}),"\n",(0,i.jsx)(s.p,{children:"Digital piano project built on a Raspberry Pi Pico 2W, featuring auto-light detection, multi-mode play and optional Wi-Fi integration."}),"\n",(0,i.jsxs)(s.admonition,{type:"info",children:[(0,i.jsx)(s.mdxAdmonitionTitle,{}),(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Author"}),": Andrei-Alexandru Ciucan ",(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.strong,{children:"GitHub Project Link"}),": ",(0,i.jsx)(s.a,{href:"https://github.com/UPB-PMRust-Students/proiect-Andrei2K3",children:"source code"})]})]}),"\n",(0,i.jsx)(s.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(s.p,{children:["Smart Light Piano is a ",(0,i.jsx)(s.strong,{children:"mini digital piano"})," based on a ",(0,i.jsx)(s.strong,{children:"Raspberry Pi Pico 2W"}),".",(0,i.jsx)(s.br,{}),"\n","It allows the player to interact with eight physical keys, triggering musical notes generated via PWM on a ",(0,i.jsx)(s.strong,{children:"5V passive buzzer"}),".",(0,i.jsx)(s.br,{}),"\n","The system integrates three LEDs for dynamic visual feedback:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Red LED"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Connected to the ",(0,i.jsx)(s.strong,{children:"photoresistor (LDR)"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Behavior"}),": As the environment gets darker, the red LED ",(0,i.jsx)(s.strong,{children:"brightens"})," proportionally; as ambient light increases, the red LED ",(0,i.jsx)(s.strong,{children:"dims"})," progressively."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Yellow LED"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Triggered"})," when a button located at an ",(0,i.jsx)(s.strong,{children:"even position"})," (2, 4, 6, 8) is pressed."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Purpose"}),": Highlights even-positioned key presses."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Green LED"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Triggered"})," when a button located at an ",(0,i.jsx)(s.strong,{children:"odd position"})," (1, 3, 5, 7) is pressed."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Purpose"}),": Highlights odd-positioned key presses."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["The piano offers ",(0,i.jsx)(s.strong,{children:"three operating modes"}),", selected through two dedicated buttons:"]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Mode Trigger"}),(0,i.jsx)(s.th,{children:"Mode Name"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Button A pressed"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Note Guess Mode"})}),(0,i.jsx)(s.td,{children:"A random note is played and the player must identify it by pressing the corresponding key. Each correct guess is stored and the sequence of correct notes is replayed as a melody after the first mistake."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Button B pressed"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Effects Mode"})}),(0,i.jsx)(s.td,{children:"Applies real-time audio effects (such as vibrato, tremolo, or frequency shifts) to the notes for a more dynamic sound experience."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Both Button A and Button B pressed"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Pressure-Controlled Pitch Mode (optional)"})}),(0,i.jsxs)(s.td,{children:["An advanced mode where note pitch varies according to air pressure measurements from the ",(0,i.jsx)(s.strong,{children:"BMP280"})," sensor, allowing players to modify sounds by moving the device up or down. This mode is optional and intended to enrich the overall interaction."]})]})]})]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"If, during testing, the BMP280 pressure readings do not provide a clear-enough delta when I move the piano up or down, the pitch\u2011modulation logic will seamlessly fall back to temperature\u2011based mapping from the same sensor."}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Optional"}),": In a future update, Wi-Fi connectivity may be added to:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Display the current ambient ",(0,i.jsx)(s.strong,{children:"temperature"})," remotely"]}),"\n",(0,i.jsxs)(s.li,{children:["Transmit or record the sequence of ",(0,i.jsx)(s.strong,{children:"played notes"})," through a network connection"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsxs)(s.p,{children:["This project combines my passion for embedded systems, music and real-time hardware interaction.",(0,i.jsx)(s.br,{}),"\n","It involves reading analog and digital inputs, communicating with sensors over I\xb2C, generating real-time audio signals and coordinating everything through asynchronous Rust programming.",(0,i.jsx)(s.br,{}),"\n","The result is a responsive system that seamlessly blends low-level hardware control with modern approaches to embedded software development."]}),"\n",(0,i.jsx)(s.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(s.p,{children:"The project has the following architecture:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Raspberry Pi Pico 2W:"})," Handles the main logic of the project - reading piano key inputs, controlling the buzzer through PWM to generate musical notes, adjusting LED brightness based on the photoresistor (LDR) reading, handling mode selection through buttons and communicating with the BMP280 sensor over I\xb2C."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Raspberry Pi Pico 2W (Debugger Controller):"}),"  Dedicated to debugging and monitoring the operation of the first Pico."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Passive 5V Buzzer (via transistor):"})," Controlled via PWM from the first Pico. Generates audible musical notes corresponding to key presses, with real-time modulation depending on the selected mode."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Piano Buttons (8 Buttons):"})," Connected to the main Pico's GPIO pins. Each button corresponds to a musical note; pressing a button triggers sound generation."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Mode Selection Buttons (2 Buttons):"})," Connected to separate GPIO pins.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Pressing Button A selects Note Guess Mode."}),"\n",(0,i.jsx)(s.li,{children:"Pressing Button B selects Effects Mode."}),"\n",(0,i.jsx)(s.li,{children:"Pressing both simultaneously activates Pressure-Controlled Pitch Mode."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Photoresistor (LDR) with Voltage Divider:"})," Provides analog light measurements read by the ADC module of the main Pico. Controls the brightness behavior of the red LED depending on the ambient light level."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"LED Indicators (Red, Yellow, Green):"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["The ",(0,i.jsx)(s.strong,{children:"red LED"})," adjusts its brightness dynamically based on the ambient light measured by the LDR \u2014 brighter in darkness, dimmer in strong light."]}),"\n",(0,i.jsxs)(s.li,{children:["The ",(0,i.jsx)(s.strong,{children:"yellow LED"})," lights up when a piano key at an even position is pressed."]}),"\n",(0,i.jsxs)(s.li,{children:["The ",(0,i.jsx)(s.strong,{children:"green LED"})," lights up when a piano key at an odd position is pressed."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"BMP280 Sensor:"}),"   Connected to the main Pico via I\xb2C. Provides real-time pressure and temperature data, used in Pressure-Controlled Pitch Mode to adjust the buzzer sound dynamically."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Power Source:"})," Provides USB power to the primary Raspberry Pi Pico 2W, which in turn supplies power to the second Pico used for debugging, along with all the connected peripherals."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Breadboard"}),": Used to build and run the entire project without soldering. All components are connected directly using jumper wires for flexibility and ease of assembly."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Prototype Board (Optional)"}),": May be used later to solder the final version of the circuit for improved durability and long-term use."]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Architecture Diagram",src:r(78941).A+"",width:"681",height:"631"})}),"\n",(0,i.jsx)(s.h2,{id:"log",children:"Log"}),"\n",(0,i.jsx)(s.h3,{id:"week-23---30-april",children:"Week 23 - 30 April"}),"\n",(0,i.jsxs)(s.p,{children:["I started working on the project documentation and set up the GitLab repository to manage the documentation separately. I created the first version of the system block diagram using diagrams.net, drafted the initial list of hardware and software components and began designing the hardware schematic in KiCad, covering the main modules. I also outlined the structure for the final ",(0,i.jsx)(s.code,{children:"index.md"})," file."]}),"\n",(0,i.jsx)(s.h3,{id:"week-5---11-may",children:"Week 5 - 11 May"}),"\n",(0,i.jsx)(s.h3,{id:"week-12---18-may",children:"Week 12 - 18 May"}),"\n",(0,i.jsx)(s.h3,{id:"week-19---25-may",children:"Week 19 - 25 May"}),"\n",(0,i.jsx)(s.h2,{id:"hardware",children:"Hardware"}),"\n",(0,i.jsx)(s.p,{children:"I am using two Raspberry Pi Pico 2W boards in this setup. The main Pico handles all piano functionalities (PWM audio output, button reading, LED brightness control via ADC and BMP280 communication over I\xb2C), while the second Pico acts as a debug interface through UART."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Hardware Device"}),(0,i.jsx)(s.th,{children:"Purpose"}),(0,i.jsx)(s.th,{children:"Usage"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Raspberry Pi Pico 2W (Main Controller)"}),(0,i.jsx)(s.td,{children:"Main microcontroller"}),(0,i.jsx)(s.td,{children:"Handles piano note generation, button input, LED control, LDR reading and BMP280 data acquisition"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Raspberry Pi Pico 2W (Debugger)"}),(0,i.jsx)(s.td,{children:"Debugging"}),(0,i.jsx)(s.td,{children:"Monitors the main controller's state via UART during development"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Passive 5V Buzzer (controlled via transistor)"}),(0,i.jsx)(s.td,{children:"Sound output"}),(0,i.jsx)(s.td,{children:"Emits musical notes generated by PWM signals"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Switching Transistor (for Buzzer)"}),(0,i.jsx)(s.td,{children:"PWM signal control"}),(0,i.jsx)(s.td,{children:"Ensures safe driving of the 5V passive buzzer without overloading GPIO pins"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"8 Piano Buttons"}),(0,i.jsx)(s.td,{children:"User input"}),(0,i.jsx)(s.td,{children:"Triggers different musical notes corresponding to each button"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"2 Mode Buttons"}),(0,i.jsx)(s.td,{children:"Mode switching"}),(0,i.jsx)(s.td,{children:"Selects the operating mode (Note Guess Mode, Effects Mode, Pressure-Controlled Mode)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Red, Yellow and Green LEDs"}),(0,i.jsx)(s.td,{children:"Visual feedback"}),(0,i.jsx)(s.td,{children:"Indicates light intensity or button presses (even/odd keypresses)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Light Dependent Resistor (LDR)"}),(0,i.jsx)(s.td,{children:"Ambient light sensor"}),(0,i.jsx)(s.td,{children:"Measures light intensity"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Fixed Resistor for LDR (10k\u03a9)"}),(0,i.jsx)(s.td,{children:"Voltage divider"}),(0,i.jsx)(s.td,{children:"Forms a divider circuit with the LDR for ADC reading"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"BMP280 Sensor"}),(0,i.jsx)(s.td,{children:"Pressure and temperature measurement"}),(0,i.jsx)(s.td,{children:"Connected over I\xb2C"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Current-Limiting Resistors (220\u03a9\u2013470\u03a9)"}),(0,i.jsx)(s.td,{children:"LED protection"}),(0,i.jsx)(s.td,{children:"Limits current through each LED to safe values"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Breadboard (830 pts)"}),(0,i.jsx)(s.td,{children:"Project assembly"}),(0,i.jsx)(s.td,{children:"Used to build and connect all components without soldering"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Prototype PCB 10x15cm (Optional)"}),(0,i.jsx)(s.td,{children:"Permanent wiring"}),(0,i.jsx)(s.td,{children:"Can be used to solder the final circuit for improved robustness"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"USB Power Supply"}),(0,i.jsx)(s.td,{children:"Power source"}),(0,i.jsx)(s.td,{children:"Supplies 5V via USB directly to the debugger Pico 2W"})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"schematics",children:"Schematics"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"KiCad",src:r(1617).A+"",width:"1023",height:"723"})}),"\n",(0,i.jsx)(s.h3,{id:"photos",children:"Photos"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Prototype",src:r(75842).A+"",width:"1023",height:"716"})}),"\n",(0,i.jsx)(s.h2,{id:"software",children:"Software"}),"\n",(0,i.jsxs)(s.p,{children:["The project firmware is written entirely in Rust, using an asynchronous multitasking model with Embassy libraries, running on a Raspberry Pi Pico 2W. ",(0,i.jsx)(s.br,{}),"\n","Four independent asynchronous tasks manage real-time behavior:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"A mode control task that monitors the two mode selection buttons and configures the piano behavior accordingly."}),"\n",(0,i.jsx)(s.li,{children:"A piano task that plays musical notes based on key presses, dynamically adapting to the active mode (Note Guess, Effects, Pressure-Controlled Pitch)."}),"\n",(0,i.jsx)(s.li,{children:"An LDR task that adjusts the brightness of the red LED depending on ambient light measured by the photoresistor."}),"\n",(0,i.jsx)(s.li,{children:"A BMP280 task that reads environmental data asynchronously via I\xb2C, supporting optional dynamic pitch adjustment based on pressure."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"detailed-design",children:"Detailed Design"}),"\n",(0,i.jsx)(s.p,{children:"The main software modules are:"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Module"}),(0,i.jsx)(s.th,{children:"Functionality"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Mode Control Task"}),(0,i.jsx)(s.td,{children:"Continuously monitors the two mode buttons. Depending on which button(s) are pressed, it updates a shared state variable that configures how the piano task operates: random note guessing, sound effects, or pressure-based pitch shifting."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Piano Task"}),(0,i.jsx)(s.td,{children:"Reads the 8 piano buttons. Generates different behaviors based on the current selected mode: normal tone playing, sound effects applied, or pitch dynamically influenced by atmospheric pressure."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"LDR Task"}),(0,i.jsx)(s.td,{children:"Reads the photoresistor (LDR) values using ADC and adjusts the PWM duty cycle to smoothly control the brightness of the red LED."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"BMP280 Task"}),(0,i.jsx)(s.td,{children:"Communicates with the BMP280 sensor over I\xb2C to acquire temperature and pressure readings every second. Pressure values are used optionally to influence musical note characteristics when in Pressure-Controlled Mode."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"PWM and GPIO Handling"}),(0,i.jsx)(s.td,{children:"PWM is used for buzzer sound modulation and LED brightness control. GPIO pins are used for button inputs with pull-up configurations and non-blocking reads."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Task Synchronization"}),(0,i.jsx)(s.td,{children:"Embassy's async framework ensures cooperative multitasking and real-time responsiveness without requiring threads or RTOS features."})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"functional-diagram",children:"Functional Diagram"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Functional Diagram",src:r(66764).A+"",width:"1023",height:"416"})}),"\n",(0,i.jsx)(s.h2,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,i.jsx)(s.h3,{id:"hardware-1",children:"Hardware"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Device"}),(0,i.jsx)(s.th,{children:"Usage"}),(0,i.jsx)(s.th,{children:"Price"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Raspberry Pi Pico 2W"}),(0,i.jsx)(s.td,{children:"Main microcontroller running piano, LDR, BMP280"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/13327-raspberry-pi-pico-2-w.html?search_query=RP2350&results=4",children:"42 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Raspberry Pi Pico 2W"}),(0,i.jsx)(s.td,{children:"Debugger"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/13327-raspberry-pi-pico-2-w.html?search_query=RP2350&results=4",children:"42 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"BMP280 Sensor Module"}),(0,i.jsx)(s.td,{children:"Air pressure and temperature readings"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/pressure-sensors/1666-modul-senzor-de-presiune-barometric-bmp280.html?search_query=BMP280&results=17",children:"9 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"LDR Sensor"}),(0,i.jsx)(s.td,{children:"Measures ambient light intensity"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/others/28-5528-photoresistor.html?search_query=Photoresistor&results=19",children:"2 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Passive Buzzer 5V"}),(0,i.jsx)(s.td,{children:"Audio output for piano notes (with PWM)"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/buzzers/634-5v-passive-buzzer.html",children:"1.5 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"2N2222 NPN Transistor"}),(0,i.jsx)(s.td,{children:"Amplifies PWM signal to drive 5V buzzer"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/transistors/935-transistor-npn-2n2222-to-92.html",children:"0.2 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Resistor 1k\u03a9 0.25W"}),(0,i.jsx)(s.td,{children:"Base resistor for transistor"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/resistors/859-025w-1k-resistor.html",children:"0.1 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Resistor 10k\u03a9 0.25W"}),(0,i.jsx)(s.td,{children:"Voltage divider with LDR"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/resistors/1088-025w-10k-resistor.html?search_query=0.25+W+10K+%CE%A9+Resistor&results=5",children:"0.1 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Red LED 5mm"}),(0,i.jsx)(s.td,{children:"Shows brightness level (PWM-controlled)"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/leds/29-5-mm-red-led-with-difused-lens.html?search_query=Red+led&results=1378",children:"0.4 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Green LED 5mm"}),(0,i.jsx)(s.td,{children:"Lights up for odd keys pressed"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/leds/38-5-mm-green-led-with-difused-lens.html?search_query=green+led&results=237",children:"0.4 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Yellow LED 5mm"}),(0,i.jsx)(s.td,{children:"Lights up for even keys pressed"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/leds/698-led-galben-de-3-mm-cu-lentile-difuze.html?search_query=yellow+led&results=198",children:"0.4 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Resistor 220\u03a9 0.25W"}),(0,i.jsx)(s.td,{children:"Current limiting resistors for LEDs"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/resistors/1097-025w-220-resistor.html?search_query=220%CE%A9&results=7",children:"0.2 RON (each) \xd73"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Tactile Push-Button 6x6mm"}),(0,i.jsx)(s.td,{children:"Piano keys (8x) + Mode selection (2x)"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/buttons-and-switches/1119-6x6x6-push-button.html?search_query=6+x+6+x+6+Push+Button&results=85",children:"0.4 RON \xd7 10"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Breadboard Jumper Wires Set"}),(0,i.jsx)(s.td,{children:"Connections"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/wires-with-connectors/12-breadboard-jumper-wire-set.html?search_query=Breadboard+Jumper+Wires+Set&results=22",children:"8.5 RON"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Colored 40p 2.54 mm Pitch Male Pin Header"}),(0,i.jsx)(s.td,{children:"Soldered on Pico 2W for connection"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/pin-headers/465-colored-40p-254-mm-pitch-male-pin-header-yellow.html?search_query=Colored+40p+2.54+mm+Pitch+Male+Pin+Header+-+Yellow&results=1",children:"1 RON x 5"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Breadboard 830 pts"}),(0,i.jsx)(s.td,{children:"Assembly platform for the entire project"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/breadboards/8-breadboard-hq-830-points.html",children:"10 RON x 2"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"20p Female Pin Header 2.54 mm(Optional)"}),(0,i.jsx)(s.td,{children:"Socket for Pico W on PCB"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/pin-headers/4166-20p-female-pin-header-254-mm.html?search_query=20p+Female+Pin+Header+2.54+mm&results=6",children:"4.3 RON x 4"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Prototype PCB 10x15cm(Optional)"}),(0,i.jsx)(s.td,{children:"For soldering permanent project"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/others/12552-10x15cm-universal-pcb-prototype-board-single-sided-254mm-hole-pitch.html?search_query=prototype+pcb&results=25",children:"7.4 RON"})})]})]})]}),"\n",(0,i.jsx)(s.h4,{id:"total-161-ron",children:"Total: 161 RON"}),"\n",(0,i.jsx)(s.h3,{id:"software-1",children:"Software"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Library"}),(0,i.jsx)(s.th,{children:"Description"}),(0,i.jsx)(s.th,{children:"Usage"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://crates.io/crates/embassy-rp",children:"embassy-rp"})}),(0,i.jsx)(s.td,{children:"Embassy Hardware Abstraction Layer (HAL) for Raspberry Pi RP2040 microcontrollers."}),(0,i.jsx)(s.td,{children:"Handles GPIO, PWM, ADC and I2C peripherals."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://crates.io/crates/embassy-time",children:"embassy-time"})}),(0,i.jsx)(s.td,{children:"Timekeeping utilities for no-std embedded systems."}),(0,i.jsx)(s.td,{children:"Timing delays and periodic tasks using async/await."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://crates.io/crates/embassy-executor",children:"embassy-executor"})}),(0,i.jsx)(s.td,{children:"Async executor for embedded environments."}),(0,i.jsx)(s.td,{children:"Runs multiple async tasks concurrently."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://crates.io/crates/embedded-hal-async",children:"embedded-hal-async"})}),(0,i.jsx)(s.td,{children:"Async traits for embedded devices (I2C, SPI, etc.)."}),(0,i.jsx)(s.td,{children:"Provides async I2C operations (write, write_read) for BMP280 communication."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://crates.io/crates/defmt",children:"defmt"})}),(0,i.jsx)(s.td,{children:"Lightweight logging framework for embedded systems."}),(0,i.jsx)(s.td,{children:"Debugging and runtime information output."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.a,{href:"https://crates.io/crates/panic-probe",children:"panic-probe"})}),(0,i.jsx)(s.td,{children:"Minimal panic handler using defmt."}),(0,i.jsx)(s.td,{children:"Captures panics and outputs debug info through RTT."})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"links",children:"Links"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://datasheets.raspberrypi.com/rp2350/rp2350-datasheet.pdf",children:"RP2350 (Raspberry\u202fPi Pico\u202f2) \u2013 Datasheet & Pinout"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://pico.implrust.com/led/pwm-rp2350.html",children:"Using PWM on RP2350"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://embassy.dev/book/#/faq",children:"Embedded\u2011HAL async (embassy) \u2013 Quick Start"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://forums.raspberrypi.com/viewtopic.php?t=207312",children:"Driving a 5\u202fV Passive Buzzer with an NPN Transistor"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://www.petervis.com/electronics%20guides/calculators/LDR/LDR.html",children:"LDR Voltage Divider Explained"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://cdn-shop.adafruit.com/datasheets/BST-BMP280-DS001.pdf",children:"BMP280 Pressure & Temperature Sensor \u2013 Application Notes"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-led-series-resistor",children:"LED Current\u2011Limiting Resistor Calculator"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard/all",children:"Breadboard Wiring Best Practices"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://www.youtube.com/watch?v=l9Kbr8cPqOE",children:"Prototype PCB Soldering Tips (Perfboard)"})}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},75842:(e,s,r)=>{r.d(s,{A:()=>t});const t=r.p+"assets/images/demo3-0540f57d1115703ceb624653eba4ffce.webp"},78941:(e,s,r)=>{r.d(s,{A:()=>t});const t=r.p+"assets/images/diagramaA-66f7a5d7cc2106c40deec5276b281443.webp"},66764:(e,s,r)=>{r.d(s,{A:()=>t});const t=r.p+"assets/images/diagramaF-3e511475cb4f470cdb17fb6b5ceee529.webp"},1617:(e,s,r)=>{r.d(s,{A:()=>t});const t=r.p+"assets/images/photo_KiCad-c74096c867b5f8a21375fe5e825fd501.webp"},28453:(e,s,r)=>{r.d(s,{R:()=>d,x:()=>o});var t=r(96540);const i={},n=t.createContext(i);function d(e){const s=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(n.Provider,{value:s},e.children)}}}]);