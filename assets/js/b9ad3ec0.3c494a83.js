"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6526],{23248:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"lab/00","title":"00 - Intro to Rust","description":"We will use the Rust programming language for the labs.","source":"@site/versioned_docs/version-fils_en/lab/00.md","sourceDirName":"lab","slug":"/lab/00","permalink":"/docs/fils_en/lab/00","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/lab/00.md","tags":[],"version":"fils_en","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Lab","permalink":"/docs/fils_en/category/lab"},"next":{"title":"01 - Debug","permalink":"/docs/fils_en/lab/01"}}');var r=t(74848),i=t(28453);const l={},a="00 - Intro to Rust",o={},c=[{value:"Resources",id:"resources",level:2},{value:"Standard library",id:"standard-library",level:2},{value:"The <code>main</code> function",id:"the-main-function",level:2},{value:"Variables and mutability",id:"variables-and-mutability",level:2},{value:"Constants",id:"constants",level:2},{value:"Data Types",id:"data-types",level:2},{value:"Scalar types",id:"scalar-types",level:3},{value:"Structures",id:"structures",level:3},{value:"Structure Implementation",id:"structure-implementation",level:4},{value:"Printing Structures",id:"printing-structures",level:4},{value:"Tuple structures",id:"tuple-structures",level:3},{value:"Enums",id:"enums",level:3},{value:"<code>Option</code> enum",id:"option-enum",level:4},{value:"Match",id:"match",level:4},{value:"<code>Result</code> enum",id:"result-enum",level:4},{value:"The <code>?</code> operator",id:"the--operator",level:5},{value:"Functions",id:"functions",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Functions with return values",id:"functions-with-return-values",level:4},{value:"Control flow",id:"control-flow",level:2},{value:"if-else",id:"if-else",level:3},{value:"loop",id:"loop",level:3},{value:"while",id:"while",level:3},{value:"for",id:"for",level:3},{value:"Complex Data Types",id:"complex-data-types",level:2},{value:"Vec",id:"vec",level:3},{value:"String",id:"string",level:3},{value:"Creating a new String",id:"creating-a-new-string",level:4},{value:"Adding to a string",id:"adding-to-a-string",level:4},{value:"Iteration Methods on Strings",id:"iteration-methods-on-strings",level:4},{value:"Run the program",id:"run-the-program",level:2},{value:"Exercises",id:"exercises",level:2},{value:"Ownership",id:"ownership",level:2},{value:"Ownership rules",id:"ownership-rules",level:3},{value:"Scope",id:"scope",level:3},{value:"Ownership in functions",id:"ownership-in-functions",level:3},{value:"Return values and scope",id:"return-values-and-scope",level:3},{value:"References and borrowing",id:"references-and-borrowing",level:3},{value:"Mutable references",id:"mutable-references",level:3},{value:"Copy trait",id:"copy-trait",level:2},{value:"Bonus at home",id:"bonus-at-home",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"00---intro-to-rust",children:"00 - Intro to Rust"})}),"\n",(0,r.jsxs)(n.p,{children:["We will use the ",(0,r.jsx)(n.a,{href:"https://www.rust-lang.org/",children:"Rust"})," programming language for the labs."]}),"\n",(0,r.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The Rust Programming Language, Chapters ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch01-00-getting-started.html",children:"1"}),", ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html",children:"2"}),", ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"3"}),", ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html",children:"4"})," and ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch05-00-structs.html",children:"5"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://tourofrust.com",children:"Tour of Rust"})," step by step tutorial"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Let's Get Rusty"})," - ",(0,r.jsx)(n.a,{href:"https://www.youtube.com/playlist?list=PLai5B987bZ9CoVR-QEIN9foz4QCJ0H2Y8",children:"The Rust Lang Book"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=n3bPhdiJm9I",children:"Structs in Rust"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=DSZqIJhkNCM",children:"Enum and Pattern Matching"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=wM6o70NAWUI",children:"Error Handling in Rust"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=Zs-pS-egQSs",children:"Common Collections in Rust"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=VFIOSWy93H0",children:"Understanding Ownership in Rust"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["This lab is rather long, but it tries to be a really quick intro to Rust. We suggest going directly to the ",(0,r.jsx)(n.a,{href:"#exercises",children:"Exercises"}),", solve one by one, and read the required documentation as you go."]})}),"\n",(0,r.jsx)(n.h2,{id:"standard-library",children:"Standard library"}),"\n",(0,r.jsx)(n.p,{children:"The standard library is divided into three levels:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Level"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Needs"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/core/index.html",children:(0,r.jsx)(n.code,{children:"core"})})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Provides the required language elements that Rust needs for compiling, like the ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/core/fmt/trait.Display.html",children:(0,r.jsx)(n.code,{children:"Display"})})," and ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/core/fmt/trait.Debug.html",children:(0,r.jsx)(n.code,{children:"Debug"})})," traits. Data can only be global items (stored in ",(0,r.jsx)(n.em,{children:".data"}),") or on the ",(0,r.jsx)(n.em,{children:"stack"}),"."]}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Hardware"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/alloc/index.html",children:(0,r.jsx)(n.code,{children:"alloc"})})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Provides everything from the ",(0,r.jsx)(n.code,{children:"core"})," level plus ",(0,r.jsx)(n.em,{children:"heap"})," allocated data structures like, ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/alloc/boxed/struct.Box.html",children:(0,r.jsx)(n.code,{children:"Box"})})," and ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/std/vec/struct.Vec.html",children:(0,r.jsx)(n.code,{children:"Vec"})}),". The developer has to provide a memory allocator, like ",(0,r.jsx)(n.a,{href:"https://docs.rs/embedded-alloc/latest/embedded_alloc/",children:"embedded_alloc"}),"."]}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Memory Allocator"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/std/index.html",children:(0,r.jsx)(n.code,{children:"std"})})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Provides everything from the ",(0,r.jsx)(n.code,{children:"alloc"})," level plus a lot of features that depend on the platform, including threads and I/O. This is the default level for Windows, Linux, macOS and similar OSes applications."]}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Operating System"})]})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This course will mostly use the ",(0,r.jsx)(n.code,{children:"core"})," level of the standard library, as the software has to run on a ",(0,r.jsx)(n.a,{href:"https://www.raspberrypi.com/products/raspberry-pi-pico/",children:"Raspberry Pi Pico"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["By default, Rust has a set of elements defined in the standard library that are imported into the program of each application. This set is called the ",(0,r.jsx)(n.em,{children:"prelude"}),", and you can look it up in the standard\nlibrary ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/std/prelude/index.html",children:"documentation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If a type you want to use is not in the prelude, you must bring that type into scope explicitly with a ",(0,r.jsx)(n.code,{children:"use"}),"\nstatement. Using the ",(0,r.jsx)(n.code,{children:"std::io"})," module gives you a number of useful features, including the ability to accept\nuser input."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use std::io; \n"})}),"\n",(0,r.jsxs)(n.h2,{id:"the-main-function",children:["The ",(0,r.jsx)(n.code,{children:"main"})," function"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"main"})," function is the entry point of our program."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    println!("Hello, world!");\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.code,{children:"println!"})," macro to print messages on the screen."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["To print more complex variables, you can use ",(0,r.jsx)(n.code,{children:"{:?}"}),", which ensures that any type that implements the Debug trait can be printed."]})}),"\n",(0,r.jsxs)(n.p,{children:["To insert a placeholder in the ",(0,r.jsx)(n.code,{children:"println!"})," macro, use a ",(0,r.jsx)(n.em,{children:"pair of braces"})," ",(0,r.jsx)(n.code,{children:"{}"})," . We provide the variable name or\nexpression to replace the provided placeholder outside the string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n\n    let name = "Mary";\n    let age = 26;\n\n    println!("Hello, {}. You are {} years old", name, age);\n    // if the replacements are only variables, one can use the inline version\n    println!("Hello, {name}. You are {age} years old");\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"variables-and-mutability",children:"Variables and mutability"}),"\n",(0,r.jsxs)(n.p,{children:["We use the ",(0,r.jsx)(n.code,{children:"let"})," keyword to create a variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let a = 5;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["By default, in Rust, variables are ",(0,r.jsx)(n.strong,{children:"immutable"})," , meaning once a value is tied to a name, you cannot\nchange that value."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let x = 5;\n    println!("The value of x is: {x}");\n    x = 6;\n    println!("The value of x is: {x}");\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this case, we will get a compilation error because we are trying to modify the value of ",(0,r.jsx)(n.code,{children:"x"})," from ",(0,r.jsx)(n.code,{children:"5"})," to ",(0,r.jsx)(n.code,{children:"6"}),", but\n",(0,r.jsx)(n.code,{children:"x"})," is immutable, so we cannot make this modification."]}),"\n",(0,r.jsxs)(n.p,{children:["Although variables are immutable by default, you can make them ",(0,r.jsx)(n.strong,{children:"mutable"})," by adding ",(0,r.jsx)(n.code,{children:"mut"})," in front of the\nvariable name. Adding ",(0,r.jsx)(n.code,{children:"mut"})," also conveys intent to future readers of the code by indicating that other parts\nof the code will modify the value of this variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let mut x = 5;\n    println!("The value of x is: {x}");\n    x = 6;\n    println!("The value of x is: {x}");\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now the value of ",(0,r.jsx)(n.code,{children:"x"})," can become ",(0,r.jsx)(n.code,{children:"6"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,r.jsxs)(n.p,{children:["Like immutable variables, constants are values that are tied to a name and have a ",(0,r.jsx)(n.strong,{children:"value known at compile time"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You are not allowed to use ",(0,r.jsx)(n.code,{children:"mut"})," with constants. Constants are not only immutable by default,\nthey are always immutable. You declare constants using the ",(0,r.jsx)(n.code,{children:"const"})," keyword instead of the ",(0,r.jsx)(n.code,{children:"let"})," keyword.\nConstants's data type has to be specified at declaration."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"chapter 3"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h2,{id:"data-types",children:"Data Types"}),"\n",(0,r.jsx)(n.h3,{id:"scalar-types",children:"Scalar types"}),"\n",(0,r.jsx)(n.p,{children:"A scalar type represents a single value. Rust has four main scalar types: integers, floating point numbers,\nbooleans, and characters."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Integer"})," \u2192 Each variant can be signed or unsigned and has an explicit size."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let x: i8 = -2;\nlet y: u16 = 25;\n"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Length"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Signed"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Unsigned"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Java Equivalent"}),(0,r.jsxs)(n.th,{style:{textAlign:"center"},children:["C Equivalent",(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-c_equivalent",id:"user-content-fnref-c_equivalent","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"8-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i8"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u8"})}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"byte"}),"/ ",(0,r.jsx)(n.code,{children:"Byte"}),(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-java_unsigned",id:"user-content-fnref-java_unsigned","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})})]}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"char"})," / ",(0,r.jsx)(n.code,{children:"unsigned char"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"16-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i16"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u16"})}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"short"})," / ",(0,r.jsx)(n.code,{children:"Short"}),(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-java_unsigned",id:"user-content-fnref-java_unsigned-2","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})})]}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"short"})," / ",(0,r.jsx)(n.code,{children:"unsigned short"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"32-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i32"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u32"})}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"int"})," / ",(0,r.jsx)(n.code,{children:"Integer"}),(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-java_unsigned",id:"user-content-fnref-java_unsigned-3","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})})]}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"int"})," / ",(0,r.jsx)(n.code,{children:"unsigned int"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"64-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i64"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u64"})}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"long"})," / ",(0,r.jsx)(n.code,{children:"Long"}),(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-java_unsigned",id:"user-content-fnref-java_unsigned-4","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})})]}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"long long"})," / ",(0,r.jsx)(n.code,{children:"unsigned long long"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"128-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"i128"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"u128"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"N/A"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"N/A"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"arch"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"isize"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"usize"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"N/A"}),(0,r.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"intptr_t"})," / ",(0,r.jsx)(n.code,{children:"uintptr_t"})]})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Floating Point"})," \u2192 Rust's floating point types are ",(0,r.jsx)(n.code,{children:"f32"})," and ",(0,r.jsx)(n.code,{children:"f64"}),", which are 32-bit and 64-bit in size, respectively. The default type is ",(0,r.jsx)(n.code,{children:"f64"})," because on modern CPUs it is about the same speed as ",(0,r.jsx)(n.code,{children:"f32"})," but is capable of more precision. All floating point types are ",(0,r.jsx)(n.strong,{children:"signed"}),"."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Length"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Floating point"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Java Equivalent"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"C Equivalent"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"32-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"f32"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"float"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"64-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"f64"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"double"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"double"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"128-bit"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"f128"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"N/A"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"N/A"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"fn main() {\n    let x = 2.0; // f64\n    let y1: f32 = 3.0; // f32\n    let y2 = 3.0f32; // f32\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Boolean"})," \u2192 Booleans are one byte in size. Boolean type in Rust is specified using bool."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let t = true;\nlet f: bool = false; // with explicit type annotation\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Character"})," \u2192 The Rust char type is the most primitive alphabetic type in the language."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let c = 'z';\nlet z: char = '\u2124'; // with explicit type annotation\nlet heart_eyed_cat = '\ud83d\ude3b';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"structures",children:"Structures"}),"\n",(0,r.jsx)(n.p,{children:"Structs are a data type construct that contain other data types in the form of fields. Rust structures are similar to C structs and Java classes."}),"\n",(0,r.jsxs)(n.p,{children:["To define a structure, we enter the ",(0,r.jsx)(n.code,{children:"struct"})," keyword and name the entire structure. Then, within curly brackets, we define the names and types of the data, which we call ",(0,r.jsx)(n.strong,{children:"fields"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"struct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To use a structure after having defined it, we create an ",(0,r.jsx)(n.strong,{children:"instance"})," of this structure by specifying concrete values \u200b\u200bfor each of the fields. We create a ",(0,r.jsx)(n.strong,{children:"stack allocated"})," instance by specifying the structure name , then add curly braces containing ",(0,r.jsx)(n.code,{children:"key: value"})," pairs , where the keys are the field names and the values \u200b\u200bare the data we want to store in those fields."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let user1 = User {\n        active: true,\n        username: String::from("someusername123"),\n        email: String::from("someone@example.com"),\n        sign_in_count: 1,\n    };\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"To access a certain member of the structure we use this syntax:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let mut user1 = User {\n        active: true,\n        username: String::from("someusername123"),\n        email: String::from("someone@example.com"),\n        sign_in_count: 1,\n    };\n \n    user1.email = String::from("anotheremail@example.com")\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["Note that the entire instance must be ",(0,r.jsx)(n.strong,{children:"editable"}),"  ; Rust ",(0,r.jsx)(n.strong,{children:"doesn't allow us"})," to mark only certain fields as mutable!"]})]}),"\n",(0,r.jsx)(n.p,{children:"We can construct a new instance of the structure as the last expression in the function body to implicitly return this new instance."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"fn build_user(email: String, username: String) -> User {\n    User {\n        active: true,\n        username: username,\n        email: email,\n        sign_in_count: 1,\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"structure-implementation",children:"Structure Implementation"}),"\n",(0,r.jsx)(n.p,{children:"Structures in Rust are similar to classes in OOP. Besides the operations mentioned above, structures can also be implemented and have methods specific to a structure. The methods are defined in the structure's implementation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"struct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nimpl User {\n    // static method (no self parameter)\n    // called with User::new()\n    fn new() -> User {\n        // ...\n    }\n    // method\n    // called user.is_active()\n    fn is_active (&self) -> bool {\n        return self.active;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"printing-structures",children:"Printing Structures"}),"\n",(0,r.jsxs)(n.p,{children:["If we try to print an instance of ",(0,r.jsx)(n.code,{children:"User"})," using the ",(0,r.jsx)(n.code,{children:"println!"})," macro as we have seen early, it will not work."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let user1 = User {\n        active: true,\n        username: String::from("someusername123"),\n        email: String::from("someone@example.com"),\n        sign_in_count: 1,\n    };\n \n    println!("User is: {}", user1);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"We will get the following error message:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"error[E0277]: `User` doesn't implement `std::fmt::Display`\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In order to print a structure, we need to use ",(0,r.jsx)(n.code,{children:"{:?}"})," instead of ",(0,r.jsx)(n.code,{children:"{}"}),", and implement ",(0,r.jsx)(n.code,{children:"Debug"})," trait for the structure with ",(0,r.jsx)(n.code,{children:"#[derive(Debug)]"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.code,{children:"Debug"})," trait to print structures, arrays, enums or any other type that doesn't implement ",(0,r.jsx)(n.code,{children:"Display"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug)]\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn main() {\n    let user1 = User {\n        active: true,\n        username: String::from("someusername123"),\n        email: String::from("someone@example.com"),\n        sign_in_count: 1,\n    };\n \n    println!("User is: {:?}", user1);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'User is: User { active: true, username: "someusername123", email: "someone@example.com", sign_in_count: 1 }\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["To format the ",(0,r.jsx)(n.code,{children:"Debug"})," nicely use ",(0,r.jsx)(n.code,{children:"{:#?}"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"tuple-structures",children:"Tuple structures"}),"\n",(0,r.jsx)(n.p,{children:"Tuples are the same as structures, just that instead of using names for their fields, they use numbers (indexes)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'struct Color(i32, i32, i32);\nstruct Device(String, u8);\n \nfn main() {\n    let black = Color(0, 0, 0);\n    let device = Device(String::from("Raspberry Pi Pico"), 2);\n\n    println!("The device type is {} and the version is {}", device.0, device.1);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Tuples can be named (as the one shown above) or can be anonymous. The following example shows how functions use anonymous tuples to return multiple values."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn get_item_and_index(value: &str) -> (String, usize) {\n    // usually search the value here\n    (String::from("the name"), 0)\n}\n\nlet value = get_item_and_index("...");\n// use value.0 and value.1\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch05-00-structs.html",children:"chapter 5"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,r.jsxs)(n.p,{children:["Enumerations, also referred as ",(0,r.jsx)(n.code,{children:"enums"}),", allow you to define a type by enumerating its possible variants.",(0,r.jsx)(n.br,{}),"\n","How to define an ",(0,r.jsx)(n.code,{children:"enum"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"enum IpAddrKind {\n    V4,\n    V6,\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"option-enum",children:[(0,r.jsx)(n.code,{children:"Option"})," enum"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Option"})," is another ",(0,r.jsx)(n.code,{children:"enum"})," defined by the standard library. The ",(0,r.jsx)(n.code,{children:"Option"})," type encodes the very common scenario in which a value can be something or nothing."]}),"\n",(0,r.jsxs)(n.p,{children:["Rust ",(0,r.jsx)(n.strong,{children:"doesn't have the null"})," functionality that many other languages \u200b\u200bhave. Null is a value that means there is no value here. In languages \u200b\u200bwith null, variables can always be in one of two states: null or non-null."]}),"\n",(0,r.jsxs)(n.p,{children:["As such, Rust does not have null values, but it does have an enumeration that can encode the concept of a value being present or absent. This enumeration is ",(0,r.jsx)(n.code,{children:"Option<T>"}),", and it is defined by the standard library as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"enum Option<T> {\n    None,\n    Some(T),\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For now, all you need to know is that ",(0,r.jsx)(n.code,{children:"<T>"})," means that the Some variant of the Option enumeration can contain data of ",(0,r.jsx)(n.strong,{children:"any type"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"fn integer_division (a:isize, b: isize) -> Option<isize> {\n    if b == 0 {\n        None\n    } else {\n        Some(a / b)\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When we have a ",(0,r.jsx)(n.code,{children:"Some"})," value, we know that a value is present and that the value is contained in ",(0,r.jsx)(n.code,{children:"Some"}),". When we have a ",(0,r.jsx)(n.code,{children:"None"})," value, it kind of means the same thing as null: we don't have a valid value."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You must convert an ",(0,r.jsx)(n.code,{children:"Option<T>"})," to a ",(0,r.jsx)(n.code,{children:"T"})," before you can perform ",(0,r.jsx)(n.code,{children:"T"})," operations with it."]})}),"\n",(0,r.jsx)(n.h4,{id:"match",children:"Match"}),"\n",(0,r.jsxs)(n.p,{children:["Rust has an extremely powerful control flow construct called ",(0,r.jsx)(n.code,{children:"match"})," that allows you to compare a value against a series of patterns and then run code based on which pattern matches. Patterns can consist of literal values, variable names, wildcards, and many other things."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"enum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n \nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter => 25,\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"When the match expression runs, it compares the resulting value to the model for each arm, in order. If a pattern matches the value, the code associated with that pattern is executed. If this pattern does not match the value, execution continues to the next arm."}),"\n",(0,r.jsxs)(n.p,{children:["The code associated with each arm is an ",(0,r.jsx)(n.strong,{children:"expression"})," , and the resulting value of the expression in the corresponding arm is the ",(0,r.jsx)(n.strong,{children:"returned value"})," for the entire matching expression."]}),"\n",(0,r.jsxs)(n.p,{children:["In the previous section, we wanted to extract the internal ",(0,r.jsx)(n.code,{children:"T"})," value of the Some case when using ",(0,r.jsx)(n.code,{children:"Option<T>"}),"; we can also handle ",(0,r.jsx)(n.code,{children:"Option<T>"})," using match , like we did with the ",(0,r.jsx)(n.code,{children:"Coin"})," enumeration! Instead of comparing parts, we will compare variants of ",(0,r.jsx)(n.code,{children:"Option<T>"}),", but the way the ",(0,r.jsx)(n.code,{children:"match"})," expression works remains the same."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main () {\n    let x = 120;\n    let y = 7;\n    match integer_division (x, y) {\n        Some(d) => println! ("{}:{} = {}", x, y, d),\n        None => println! ("division by 0")\n    };\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"result-enum",children:[(0,r.jsx)(n.code,{children:"Result"})," enum"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Result"})," is an ",(0,r.jsx)(n.code,{children:"enum"})," whose purpose is to encode error management information:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The variant ",(0,r.jsx)(n.code,{children:"Ok"})," indicates that the operation was successful and within the ",(0,r.jsx)(n.code,{children:"Ok"})," the intended result is wrapped"]}),"\n",(0,r.jsxs)(n.li,{children:["The variant ",(0,r.jsx)(n.code,{children:"Err"})," indicates that the operation had an error somewhere and within the ",(0,r.jsx)(n.code,{children:"Err"})," a struct/enum with more information about the error that happened"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The definition given by the standard library is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"enum Result<T,E> {\n    Ok(T),\n    Err(E),\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["where ",(0,r.jsx)(n.code,{children:"T"})," and ",(0,r.jsx)(n.code,{children:"E"})," are generic types and mean you may have anything within an ",(0,r.jsx)(n.code,{children:"Ok"})," or an ",(0,r.jsx)(n.code,{children:"Err"})]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use std::fs::File;\n \nfn main() {\n    let greeting_file_result = File::open("hello.txt");\n \n    let greeting_file = match greeting_file_result {\n        Ok(file) => {\n            // use the file variable here\n        }\n        Err(error) => panic!("Problem opening the file: {:?}", error),\n    };\n}\n'})}),"\n",(0,r.jsxs)(n.h5,{id:"the--operator",children:["The ",(0,r.jsx)(n.code,{children:"?"})," operator"]}),"\n",(0,r.jsxs)(n.p,{children:["You may place a ",(0,r.jsx)(n.code,{children:"?"})," after a call that returns a result value, and it will immediatelly propagate the error to the caller, otherwise continue as if the expression is the value inside the ",(0,r.jsx)(n.code,{children:"Ok"})," variant"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use std::fs::File;\nuse std::io::{self, Read};\n \nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut username = String::new();\n \n    File::open("hello.txt")?.read_to_string(&mut username)?;\n \n    Ok(username)\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch06-00-enums.html",children:"chapter 6"})," of the documentation."]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tuple"})," \u2192 A tuple is a structure used for grouping a number of values \u200b\u200bwith a variety of types into a single compound type. Tuples have a ",(0,r.jsx)(n.strong,{children:"fixed"})," length  : once declared, their size cannot increase or decrease."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let tup: (i32, f64, u8) = (500, 6.4, 1);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Array"})," \u2192 Unlike a tuple, each element in an array must have the ",(0,r.jsx)(n.strong,{children:"same type"}),". Unlike arrays in some other languages, Rust arrays have a ",(0,r.jsx)(n.strong,{children:"fixed"})," length."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let a = [1, 2, 3, 4, 5];\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"chapter 3"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsxs)(n.p,{children:["We define a function in Rust by entering ",(0,r.jsx)(n.code,{children:"fn"})," keyword followed by a function name and a set of parentheses. Curly braces tell the compiler where the function body begins and ends."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    println!("Hello, world!");\n \n    another_function();\n}\n \nfn another_function() {\n    println!("Another function.");\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["We can define functions with parameters, which are special variables that are part of a function's signature. When a function has parameters, you can provide it with ",(0,r.jsx)(n.em,{children:"concrete values"})," \u200b\u200bfor those parameters, also called ",(0,r.jsx)(n.em,{children:"arguments"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    // the `another_function` function call has one single argument, the value 5.\n    another_function(5);\n}\n \n// the `another_function`function has one single parameter `x` of type `i32`\nfn another_function(x: i32) {\n    println!("The value of x is: {x}");\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsx)(n.p,{children:"In function signatures you must declare the type of each parameter!"})]}),"\n",(0,r.jsx)(n.h4,{id:"functions-with-return-values",children:"Functions with return values"}),"\n",(0,r.jsxs)(n.p,{children:["Functions can return values \u200b\u200bto the code that calls them. We don't name the return values, but we must declare their type after ",(0,r.jsx)(n.em,{children:"an arrow"})," (",(0,r.jsx)(n.code,{children:"->"}),"). In Rust, the function's return value is synonymous with the value of ",(0,r.jsx)(n.strong,{children:"the final expression"})," in a function's body block. You can return earlier from a function by using the ",(0,r.jsx)(n.code,{children:"return"})," keyword and specifying a value, but most functions implicitly return the last expression."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn five() -> i32 {\n    5\n}\n \nfn main() {\n    let x = five();\n    println!("The value of x is: {x}");// "The value of x is: 5"\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"chapter 3"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h2,{id:"control-flow",children:"Control flow"}),"\n",(0,r.jsx)(n.h3,{id:"if-else",children:"if-else"}),"\n",(0,r.jsxs)(n.p,{children:["All ",(0,r.jsx)(n.code,{children:"if"})," expressions start with the ",(0,r.jsx)(n.code,{children:"if"})," keyword , followed by a condition. Optionally, we can also include an ",(0,r.jsx)(n.code,{children:"else"})," expression."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let number = 3;\n \n    if number < 5 {\n        println!("condition was true");\n    } else {\n        println!("condition was false");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can use multiple conditions by combining ",(0,r.jsx)(n.code,{children:"if"})," and ",(0,r.jsx)(n.code,{children:"else"})," in an ",(0,r.jsx)(n.code,{children:"else if"})," expression:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let number = 6;\n \n    if number % 4 == 0 {\n        println!("number is divisible by 4");\n    } else if number % 3 == 0 {\n        println!("number is divisible by 3");\n    } else if number % 2 == 0 {\n        println!("number is divisible by 2");\n    } else {\n        println!("number is not divisible by 4, 3, or 2");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Because ",(0,r.jsx)(n.code,{children:"if"})," is an expression, we can use it on ",(0,r.jsx)(n.strong,{children:"the right side"})," of a ",(0,r.jsx)(n.code,{children:"let"})," statement to assign the result to a variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let condition = true;\n    let number = if condition { 5 } else { 6 };\n \n    println!("The value of number is: {number}");//"The value of the number is 5"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"loop",children:"loop"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"loop"})," keyword tells Rust to run a block of code over and over forever or until you ",(0,r.jsx)(n.strong,{children:"explicitly"})," tell it to stop."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    loop {\n        println!("again!");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["One use of a ",(0,r.jsx)(n.code,{children:"loop"})," is to retry an operation that you know might fail, such as checking if a thread has finished its work. You may also need to pass the result of this operation out of the loop to the rest of your code. To do this, you can add the value you want to return after the ",(0,r.jsx)(n.code,{children:"break"})," expression you use to stop the loop; this value will be returned out of the loop so you can use it:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let mut counter = 0;\n \n    let result = loop {\n        counter += 1;\n \n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n \n    println!("The result is {result}");\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"while",children:"while"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let mut number = 3;\n \n    while number != 0 {\n        println!("{number}!");\n \n        number -= 1;\n    }\n \n    println!("LIFTOFF!!!");\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"for",children:"for"}),"\n",(0,r.jsxs)(n.p,{children:["In Rust, the ",(0,r.jsx)(n.strong,{children:"for"})," structure is used to iterate over a list of elements (vec). With each iteration, a reference to an element in the list is returned."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let a = [10, 20, 30, 40, 50];\n    \n    for element in a {\n\n        println!("the value is: {element}");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["For a better understanding, please read ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html",children:"chapter 3"})," of the documentation."]})]}),"\n",(0,r.jsx)(n.h2,{id:"complex-data-types",children:"Complex Data Types"}),"\n",(0,r.jsx)(n.h3,{id:"vec",children:"Vec"}),"\n",(0,r.jsxs)(n.p,{children:["The data type that Rust standard library provides for storing a list of data is ",(0,r.jsx)(n.code,{children:"Vec"}),". This is similar ot the C++ ",(0,r.jsx)(n.code,{children:"vector"})," and Java ",(0,r.jsx)(n.code,{children:"ArrayList"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The data type of a vector is ",(0,r.jsx)(n.code,{children:"Vec<T>"}),", where ",(0,r.jsx)(n.code,{children:"T"})," can be any data type."]}),"\n",(0,r.jsxs)(n.p,{children:["To create a new vector, Rust provides the ",(0,r.jsx)(n.code,{children:"vec!"})," macro. A longer vay of writing is ",(0,r.jsx)(n.code,{children:"Vec::new()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let v = vec![];\n// or\nlet v = Vec::new();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The actual type of ",(0,r.jsx)(n.code,{children:"T"})," should be inferred by the compiler."]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.p,{children:"Sometimes the compiler is not able to infer the data type and we must provide it."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let v: Vec<String> = vec![];\n// or\nlet v = Vec::<String>::new();\n"})})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Vec"})," type provides several functions to insert, access and delete elements."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Returned Data Type"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"len()"})}),(0,r.jsx)(n.td,{children:"Number of elements in the vector"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"usize"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"push(t: T)"})}),(0,r.jsxs)(n.td,{children:["Add an element of type ",(0,r.jsx)(n.code,{children:"T"})," to the end of the vector"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"()"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"get(index: usize)"})}),(0,r.jsx)(n.td,{children:"Get a reference to one of the elements in the vector"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Option<&T>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"get_mut(index:usize)"})}),(0,r.jsx)(n.td,{children:"Get a mutable reference to one of the elements in the vector"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Option<&mut T>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"remove(index:usize)"})}),(0,r.jsx)(n.td,{children:"Remove the element at an index."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})})]})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"remove"})," function will panic if the ",(0,r.jsx)(n.code,{children:"index"})," is out of bounds."]})}),"\n",(0,r.jsxs)(n.p,{children:["The best way to iterate of all the elements in a ",(0,r.jsx)(n.code,{children:"Vec"})," is using a ",(0,r.jsx)(n.code,{children:"for"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"for element in v {\n    // use element of type &T\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,r.jsxs)(n.p,{children:["Rust has only one type of string in the core language, which is the string slice ",(0,r.jsx)(n.code,{children:"str"})," which is usually seen in its borrowed form ",(0,r.jsx)(n.code,{children:"&str"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"String"})," type , which is provided by the Rust standard library rather than encoded in the main language, is a scalable, mutable, and owned UTF-8 encoded string type ."]}),"\n",(0,r.jsx)(n.h4,{id:"creating-a-new-string",children:"Creating a new String"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let mut s = String::new();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This line creates a new empty string called ",(0,r.jsx)(n.code,{children:"s"}),", which we can then load data into."]}),"\n",(0,r.jsxs)(n.p,{children:["We can use the ",(0,r.jsx)(n.code,{children:"String::from"})," function or the ",(0,r.jsx)(n.code,{children:"to_string"})," function to create a string from a string literal:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'let s = String::from("initial contents");\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'let data = "initial contents";\n \nlet s = data.to_string();\n\n// the method also works on a literal directly:\nlet s = "initial contents".to_string();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"adding-to-a-string",children:"Adding to a string"}),"\n",(0,r.jsxs)(n.p,{children:["We can expand a string using the ",(0,r.jsx)(n.code,{children:"push_str"})," method to add a string slice."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'let mut s = String::from("foo");\ns.push_str("bar");\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The push"})," method takes ",(0,r.jsx)(n.strong,{children:"a single character"})," as a parameter and adds it to the string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let mut s = String::from(\"lo\");\ns.push('l');\n"})}),"\n",(0,r.jsx)(n.h4,{id:"iteration-methods-on-strings",children:"Iteration Methods on Strings"}),"\n",(0,r.jsxs)(n.p,{children:["The best way to operate on pieces of strings is to be explicit about whether you want characters or bytes. For individual Unicode scalar values, use the ",(0,r.jsx)(n.code,{children:"chars"})," method ."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'for c in "\u0417\u0434".chars() {\n    println!("{}", c);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"run-the-program",children:"Run the program"}),"\n",(0,r.jsx)(n.p,{children:"In order to run the program we may be anywhere in the crate's folder and execute the command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo run\n"})}),"\n",(0,r.jsx)(n.h2,{id:"exercises",children:"Exercises"}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["If you don't have Rust installed, you can use ",(0,r.jsx)(n.a,{href:"https://play.rust-lang.org/",children:"Rust Playground"})," to solve the topics."]})]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Before tackling the exercises, take a look and cover chapters ",(0,r.jsx)(n.a,{href:"https://tourofrust.com/chapter_1_en.html",children:"1"}),", ",(0,r.jsx)(n.a,{href:"https://tourofrust.com/chapter_2_en.html",children:"2"})," and ",(0,r.jsx)(n.a,{href:"https://tourofrust.com/chapter_3_en.html",children:"3"})," of ",(0,r.jsx)(n.a,{href:"https://tourofrust.com/",children:"Tour of Rust"})," tutorials."]})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Write a function that takes your name as a parameter and greets you to ",(0,r.jsx)(n.code,{children:"stdout"})," (prints on the screen). What type should the parameter have and why? (",(0,r.jsx)(n.strong,{children:"1p"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Write a function that takes an unsigned integer ",(0,r.jsx)(n.code,{children:"N"})," as a parameter and prints out the first ",(0,r.jsx)(n.code,{children:"N"})," odd numbers (",(0,r.jsx)(n.strong,{children:"1p"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Write a function that returns the first even number from an array slice. Make sure to handle the case when there is no even number. (",(0,r.jsx)(n.strong,{children:"1p"}),") ",(0,r.jsxs)(n.em,{children:["Hint: a slice is a part of an array, ",(0,r.jsx)(n.code,{children:"&a[first..end]"}),". Take a look at ",(0,r.jsx)(n.a,{href:"#for",children:(0,r.jsx)(n.code,{children:"for"})})," and ",(0,r.jsx)(n.a,{href:"#option-enum",children:(0,r.jsx)(n.code,{children:"Option"})}),". Keep in mind that for gives a reference to each element in the list."]})]}),"\n",(0,r.jsxs)(n.li,{children:["Write a function that looks through a vector of strings and returns the first element that has more than 4 characters (",(0,r.jsx)(n.strong,{children:"1p"}),") ",(0,r.jsxs)(n.em,{children:["Hint: Take a look at ",(0,r.jsx)(n.a,{href:"#for",children:(0,r.jsx)(n.code,{children:"for"})}),", ",(0,r.jsx)(n.a,{href:"#option-enum",children:(0,r.jsx)(n.code,{children:"Option"})}),", and the ",(0,r.jsx)(n.a,{href:"#string",children:(0,r.jsx)(n.code,{children:"from(), len() and to_string()"})})," functions."]})]}),"\n",(0,r.jsxs)(n.li,{children:["Define a vector of transactions that can either be in Ron, Dollars, Euros, Pounds and Bitcoin. Create a function that calculates the total value in Ron that the vector has\n(assume Ron is 1, Dollar is 4.5, Euro is 5, Pound is 6 and Bitcoin is 100000) (",(0,r.jsx)(n.strong,{children:"2p"}),") ",(0,r.jsxs)(n.em,{children:["Hint: take a look at ",(0,r.jsx)(n.a,{href:"#enums",children:(0,r.jsx)(n.code,{children:"enum"})})," and ",(0,r.jsx)(n.a,{href:"#structures",children:(0,r.jsx)(n.code,{children:"structures"})}),"."]})]}),"\n",(0,r.jsxs)(n.li,{children:["Write a function that transforms a string slice ",(0,r.jsx)(n.code,{children:"&str"})," into an unsigned integer, returning either the value, or an error code. Create an error type that handles the cases where ",(0,r.jsx)(n.em,{children:"string is empty"}),", ",(0,r.jsx)(n.em,{children:"string has invalid character"})," (and at which position) and when ",(0,r.jsx)(n.em,{children:"the number given is negative"}),". (",(0,r.jsx)(n.strong,{children:"2p"}),") ",(0,r.jsxs)(n.em,{children:["Hint: Take a look at ",(0,r.jsx)(n.a,{href:"#option-enum",children:(0,r.jsx)(n.code,{children:"Option"})})," and ",(0,r.jsx)(n.a,{href:"#result-enum",children:(0,r.jsx)(n.code,{children:"Result"})})]})]}),"\n",(0,r.jsxs)(n.li,{children:["Define a structure ",(0,r.jsx)(n.code,{children:"Complex"})," with floats. (",(0,r.jsx)(n.strong,{children:"2p"}),")\na. implement an associated static function ",(0,r.jsx)(n.code,{children:"new"})," for this structure.\nb. Implement 2 possible operations for it (which includes the absolute value and multiplication).\nc. Implement a display method that prints the number."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ownership",children:"Ownership"}),"\n",(0,r.jsx)(n.p,{children:"Ownership is a set of rules that govern how a Rust program manages memory. All programs must manage the way they use the memory of a computer while running."}),"\n",(0,r.jsxs)(n.p,{children:["Some languages have ",(0,r.jsx)(n.strong,{children:"garbage collection"})," that regularly searches for unused memory during program execution, in other languages, the programmer must explicitly allocate and release memory."]}),"\n",(0,r.jsxs)(n.p,{children:["Rust uses a third approach: the memory is managed via a ",(0,r.jsx)(n.strong,{children:"property system"})," with a set of ",(0,r.jsx)(n.strong,{children:"rules"})," that the compiler verifies. If one of the rules is violated, the program will not compile. None of the property characteristics will slow down your program during its execution."]}),"\n",(0,r.jsx)(n.h3,{id:"ownership-rules",children:"Ownership rules"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Each value in Rust has an ",(0,r.jsx)(n.strong,{children:"owner"})]}),"\n",(0,r.jsxs)(n.li,{children:["A value cannot have more than one ",(0,r.jsx)(n.strong,{children:"owner"})," at a time"]}),"\n",(0,r.jsx)(n.li,{children:"When the values are out of reach, they are dropped"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scope",children:"Scope"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"scope"})," is the code area of a program in which an element is valid."]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example to understand the concept:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'{\n    // Here s is invalid\n    let s = "hello";   // s is valid past this point\n} // after this the value s will be dropped\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ownership-in-functions",children:"Ownership in functions"}),"\n",(0,r.jsx)(n.p,{children:"The mechanisms for transmitting a value to a function are similar to those of assigning a value to a variable. Switching a variable to a function will move or copy, just as the assignment does."}),"\n",(0,r.jsx)(n.p,{children:"Example (read the comments):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let s = String::from("hello");  // s comes into scope\n \n    takes_ownership(s);             // s\'s value moves into the function...\n                                    // ... and so is no longer valid here\n \n    let x = 5;                      // x comes into scope\n \n    makes_copy(x);                  // a copy to x is passed to the function,\n                                    // but i32 is Copy, so it\'s okay to still\n                                    // use x afterward\n \n} // Here, x goes out of scope, then s. But because s\'s value was moved, nothing\n  // special happens.\n \nfn takes_ownership(some_string: String) { // some_string comes into scope\n    println!("{}", some_string);\n} // Here, some_string goes out of scope and `drop` is called. The backing\n  // memory is freed.\n \nfn makes_copy(some_integer: i32) { // some_integer comes into scope\n    println!("{}", some_integer);\n} // Here, some_integer goes out of scope. Nothing special happens.\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If we were trying to use s after the call to ",(0,r.jsx)(n.code,{children:"take_ownership"}),", Rust would return a compilation error. These static checks protect us from errors."]}),"\n",(0,r.jsx)(n.h3,{id:"return-values-and-scope",children:"Return values and scope"}),"\n",(0,r.jsx)(n.p,{children:"The return values can also transfer the ownership."}),"\n",(0,r.jsxs)(n.p,{children:["The possession of a variable follows the same pattern each time: the assignment of one value to another variable moves it. When a variable that includes data on the heap comes out of the scope, the value will be cleaned by ",(0,r.jsx)(n.strong,{children:"drop"})," unless the data ownership has been moved to another variable."]}),"\n",(0,r.jsx)(n.p,{children:"Example (read the comments):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let s1 = gives_ownership();         // gives_ownership moves its return\n                                        // value into s1\n \n    let s2 = String::from("hello");     // s2 comes into scope\n \n    let s3 = takes_and_gives_back(s2);  // s2 is moved into\n                                        // takes_and_gives_back, which also\n                                        // moves its return value into s3\n} // Here, s3 goes out of scope and is dropped. s2 was moved, so nothing\n  // happens. s1 goes out of scope and is dropped.\n \nfn gives_ownership() -> String {             // gives_ownership will move its\n                                             // return value into the function\n                                             // that calls it\n \n    let some_string = String::from("yours"); // some_string comes into scope\n \n    some_string                              // some_string is returned and\n                                             // moves out to the calling\n                                             // function\n}\n \n// This function takes a String and returns one\nfn takes_and_gives_back(a_string: String) -> String { // a_string comes into\n                                                      // scope\n \n    a_string  // a_string is returned and moves out to the calling function\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"references-and-borrowing",children:"References and borrowing"}),"\n",(0,r.jsx)(n.p,{children:"A reference is like a pointer in the sense that it is an address that we can track to access the data stored at that address; these data belong to another variable. Unlike a pointer, a reference is guaranteed to point to a valid value of a particular type for the lifetime of this reference."}),"\n",(0,r.jsxs)(n.p,{children:["The symbol ",(0,r.jsx)(n.code,{children:"&"})," is used to mark a reference, either before the name of a variable, or, for the case of a parameter of a function, before the type of the parameter. These sprinkles represent references and allow you to refer to a value without your own ownership."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let x: u16 = 10;\nlet y = &x;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example of a function which takes a reference to an object as a parameter instead of taking possession of this value:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let s1 = String::from("hello");\n    let len = calculate_length(&s1);\n    println!("The length of \'{}\' is {}.", s1, len);\n}\n \nfn calculate_length(s: &String) -> usize { // s is a reference to a String\n    s.len()\n} // Here, s goes out of scope. But because it does not have ownership of what\n  // it refers to, it is not dropped.\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The syntax ",(0,r.jsx)(n.code,{children:"s1"})," allows us to create a reference that refers to the value of s1 but does not. Since the reference does not have the value to which it points, the value of s1 will not be deleted when the reference ceases to be used."]}),"\n",(0,r.jsx)(n.p,{children:"Similarly, the signature of the function uses & to indicate that the type of parameter s is a reference."}),"\n",(0,r.jsx)(n.p,{children:"We call borrowing the action of creating a reference. As in real life, you can borrow something from someone. When you don't need the borrowed thing anymore, you have to return it. You don't own it."}),"\n",(0,r.jsx)(n.p,{children:"Just as the variables are immutable by default, so are the references. We are not allowed to change the value pointed to by a reference"}),"\n",(0,r.jsx)(n.h3,{id:"mutable-references",children:"Mutable references"}),"\n",(0,r.jsxs)(n.p,{children:["If we want to change the value of a reference we have to say this explicitly to the compiler using the keyword ",(0,r.jsx)(n.code,{children:"mut"})," Mutable references have a great restriction: if you have a mutable reference to a value, you cannot have other references to that value."]}),"\n",(0,r.jsx)(n.p,{children:"Nor can we have a reference mutable while we have one immutable the same value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn main() {\n    let mut s = String::from("hello");\n    change(&mut s);\n}\n \nfn change(some_string: &mut String) {\n    some_string.push_str(", world");\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.p,{children:"Rules for references:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"At any time, you can have only a mutable reference or any number of immutable references but not both."}),"\n",(0,r.jsxs)(n.li,{children:["References must always be ",(0,r.jsx)(n.strong,{children:"valid"}),"."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"copy-trait",children:"Copy trait"}),"\n",(0,r.jsx)(n.p,{children:"Let's take a similar code to the one presented before:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'let mut x:i32 = 0;\nlet mut y = x;\ny = 5;\nprintln!("{x}"); // Prints 0\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This time, the compiler seems to not have moved the variable ",(0,r.jsx)(n.code,{children:"x"})," into ",(0,r.jsx)(n.code,{children:"y"}),". Why? Because i32 implements ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/core/marker/trait.Copy.html",children:(0,r.jsx)(n.code,{children:"Copy"})}),". This is a trait used for types that are inexpensive to duplicate bit by bit, and which also do not allow 2 mutable references to the same location in memory."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Implements Copy"}),(0,r.jsx)(n.th,{children:"Reason"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"i32"})}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"f64"})}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bool"})}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"String"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"It holds a pointer to its internal buffer. The buffer had to be duplicated when copying, action that a byte by byte copy is not able to do."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Vec<_>"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"It holds a pointer to its internal buffer. The buffer had to be duplicated when copying, action that a byte by byte copy is not able to do."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"&str"})}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"&mut str"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"Copying would create another mutable reference to the same value."})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["You may implement the ",(0,r.jsx)(n.code,{children:"Copy"})," trait to your structs and enums by using ",(0,r.jsx)(n.code,{children:"#[derive(Clone, Copy)]"})]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["You ",(0,r.jsx)(n.strong,{children:"must"})," implement ",(0,r.jsx)(n.code,{children:"Clone"})," trait in order to derive ",(0,r.jsx)(n.code,{children:"Copy"}),". Also, all of the fields must have types that implement ",(0,r.jsx)(n.code,{children:"Copy"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"bonus-at-home",children:"Bonus at home"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Rewrite the function at 2., but this time implement it using the ",(0,r.jsx)(n.a,{href:"https://www.geeksforgeeks.org/sieve-of-eratosthenes/",children:"Sieve of Erathostenes"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Define a struct called MiniTuring, with a buffer of 256 booleans and a cursor."}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Write an associated (static) function called new that creates an instance of the structure."}),"\n",(0,r.jsx)(n.li,{children:"Write a method called display that prints the tape with 1's and 0's instead of trues and falses, without newlines or spaces in between"}),"\n",(0,r.jsx)(n.li,{children:'Read the keyboard until "h" is received. "l" will move the cursor to the left with wrap around, "r" will move the cursor to the right with wrap around, "1" will set the element at the cursor to true, "0" will set the element at the cursor to false, "p" prints the value at cursor, "h" displays the tape'}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Create a basic expression parser for integer numbers, which supports +,-,*,/. Assume unary - will not happen (no expressions like 5*-3, -2+7)"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Define an enum called Expression with the appropriate variants(hint: use ",(0,r.jsx)(n.a,{href:"https://doc.rust-lang.org/alloc/boxed/struct.Box.html",children:(0,r.jsx)(n.code,{children:"Box"})}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Create a function that returns an Expression based on a given string. Respect operator precedence rules"}),"\n",(0,r.jsx)(n.li,{children:"Creates a function that takes an Expression and evaluates it to an i32"}),"\n",(0,r.jsx)(n.li,{children:"Read an expression from stdin and print out the result"}),"\n"]}),"\n","\n",(0,r.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,r.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{id:"user-content-fn-c_equivalent",children:["\n",(0,r.jsxs)(n.p,{children:["The data types used here are considered for a 32 bit system, for other architectures the equivalent data types might differ (",(0,r.jsx)(n.code,{children:"short"})," is at least 2 bytes long). ",(0,r.jsx)(n.a,{href:"#user-content-fnref-c_equivalent","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{id:"user-content-fn-java_unsigned",children:["\n",(0,r.jsxs)(n.p,{children:["Starting with Java 8, the ",(0,r.jsx)(n.code,{children:"Number"})," classes have some helper methods, like ",(0,r.jsx)(n.code,{children:"compareUnsigned"})," and ",(0,r.jsx)(n.code,{children:"toUnsigned..."})," that allow the usage and manipulation of unsigned numbers. ",(0,r.jsx)(n.a,{href:"#user-content-fnref-java_unsigned","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"})," ",(0,r.jsxs)(n.a,{href:"#user-content-fnref-java_unsigned-2","data-footnote-backref":"","aria-label":"Back to reference 2-2",className:"data-footnote-backref",children:["\u21a9",(0,r.jsx)(n.sup,{children:"2"})]})," ",(0,r.jsxs)(n.a,{href:"#user-content-fnref-java_unsigned-3","data-footnote-backref":"","aria-label":"Back to reference 2-3",className:"data-footnote-backref",children:["\u21a9",(0,r.jsx)(n.sup,{children:"3"})]})," ",(0,r.jsxs)(n.a,{href:"#user-content-fnref-java_unsigned-4","data-footnote-backref":"","aria-label":"Back to reference 2-4",className:"data-footnote-backref",children:["\u21a9",(0,r.jsx)(n.sup,{children:"4"})]})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);