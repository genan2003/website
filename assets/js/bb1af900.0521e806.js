"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9290],{12988:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"project/2025/npopa/index","title":"CrateDigger","description":"Dig. Chop. Loop. Repeat.","source":"@site/versioned_docs/version-acs_cc/project/2025/npopa/index.md","sourceDirName":"project/2025/npopa","slug":"/project/2025/npopa/","permalink":"/docs/acs_cc/project/2025/npopa/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-acs_cc/project/2025/npopa/index.md","tags":[],"version":"acs_cc","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Snake","permalink":"/docs/acs_cc/project/2025/nicolae.dragu/"},"next":{"title":"WaterBerry","permalink":"/docs/acs_cc/project/2025/oana.diaconu/"}}');var i=n(74848),r=n(28453);const l={},c="CrateDigger",d={},a=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Raspberry Pi Pico 2",id:"raspberry-pi-pico-2",level:3},{value:"Display (ST7735R)",id:"display-st7735r",level:3},{value:"Buttons",id:"buttons",level:3},{value:"Micro SD Card Module",id:"micro-sd-card-module",level:3},{value:"DAC (MAX98357A)",id:"dac-max98357a",level:3},{value:"Output (Speaker)",id:"output-speaker",level:3},{value:"Log",id:"log",level:2},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics",level:2},{value:"Bill of Materials",id:"bill-of-materials",level:2},{value:"Software",id:"software",level:2},{value:"Links",id:"links",level:2}];function o(e){const t={a:"a",admonition:"admonition",br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"cratedigger",children:"CrateDigger"})}),"\n",(0,i.jsx)(t.p,{children:"Dig. Chop. Loop. Repeat."}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Author"}),": Popa Nicolae ",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"GitHub Project Link"}),": ",(0,i.jsx)(t.a,{href:"https://github.com/UPB-PMRust-Students/proiect-nicupopa",children:"https://github.com/UPB-PMRust-Students/proiect-nicupopa"})]})}),"\n",(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(t.p,{children:"CrateDigger is a portable sampler built around a Raspberry Pi Pico 2 and programmed using the Embassy framework in Rust. The device allows users to sample audio, playback predefined samples, and perform beat-making using a 16-step sequencer. It features a user interface with tactile buttons, a TFT screen with animations, and high-quality audio output via DAC and an integrated speaker. Ideal for music producers looking for a portable sampler/sequencer."}),"\n",(0,i.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsxs)(t.p,{children:["I have always been passionate about music and beat-making equipment. When the opportunity to pick this project came up, I knew it was the perfect opportunity to blend the two things I'm passionate about.\nMy goal is to create a compact, DIY sampler and sequencer that allows musicians and hobbyists to experiment with sounds, create beats, and take their creativity anywhere.",(0,i.jsx)(t.br,{}),"\n","This project is not only a technical challenge but also a personal mission to create a fun tool that I might use in the future."]}),"\n",(0,i.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Diagram",src:n(76217).A+"",width:"858",height:"768"})}),"\n",(0,i.jsx)(t.h3,{id:"raspberry-pi-pico-2",children:"Raspberry Pi Pico 2"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Role:"})," Central microcontroller, manages audio processing, input/output control, and overall device logic."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Connections:"}),(0,i.jsx)(t.br,{}),"\n","Display, Micro SD Card Module, DAC, Buttons, and Output components."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"display-st7735r",children:"Display (ST7735R)"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Interface:"})," SPI",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Connections:"})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"SDA (Data Line) connected to Raspberry Pi Pico 2 SPI pins"}),"\n",(0,i.jsx)(t.li,{children:"SCL (Clock Line) connected to Raspberry Pi Pico 2 SPI pins"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Role:"})," Displays user interface, sequencing steps and device status."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"buttons",children:"Buttons"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Interface:"})," GPIO\n",(0,i.jsx)(t.strong,{children:"Connections:"})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Connected to GPIO pins for controls (playback, recording, navigation, sequencing)"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Role:"})," Allows user input for sampling, playback, sequence control, and settings."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"micro-sd-card-module",children:"Micro SD Card Module"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Interface:"})," SPI",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Connections:"})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"SCK (Serial Clock) connected to Pico SPI pin"}),"\n",(0,i.jsx)(t.li,{children:"MOSI (Master Out Slave In) connected to Pico SPI pin"}),"\n",(0,i.jsx)(t.li,{children:"MISO (Master In Slave Out) connected to Pico SPI pin"}),"\n",(0,i.jsx)(t.li,{children:"CS (Chip Select) connected to Pico GPIO pin"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Role:"})," Stores audio samples, sequences, presets, and configuration data."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"dac-max98357a",children:"DAC (MAX98357A)"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Interface:"})," I2S",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Connections:"})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Connected via I2S interface pins on the Raspberry Pi Pico 2"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Role:"})," Converts digital audio signals to high-quality analog audio for speaker output."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"output-speaker",children:"Output (Speaker)"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Role:"})," Outputs audio signal from the DAC to provide sound playback."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"log",children:"Log"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Week 5 - 11 May"}),":",(0,i.jsx)(t.br,{}),"\n","WIP..."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Week 12 - 18 May"}),":",(0,i.jsx)(t.br,{}),"\n","WIP..."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Week 19 - 25 May"}),":",(0,i.jsx)(t.br,{}),"\n","WIP..."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"hardware",children:"Hardware"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Raspberry Pi Pico 2 (RP2350): Main microcontroller handling audio processing and system logic."}),"\n",(0,i.jsx)(t.li,{children:"I2S DAC \u2013 MAX98357A: Converts digital audio signals to analog for high-quality speaker output."}),"\n",(0,i.jsx)(t.li,{children:"ST7735R display: Colored screen for animations."}),"\n",(0,i.jsx)(t.li,{children:"Speaker: Outputs audio playback."}),"\n",(0,i.jsx)(t.li,{children:"Two potentiometers: For adjustable controls (volume/effects)."}),"\n",(0,i.jsx)(t.li,{children:"Buttons: Input for interraction with the device."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"schematics",children:"Schematics"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Schematic",src:n(42737).A+"",width:"742",height:"614"})}),"\n",(0,i.jsx)(t.h2,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Device"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Usage"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Price"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/13327-raspberry-pi-pico-2-w.html?search_query=5056561803975&results=1",children:"2x Raspberry Pi Pico 2 W"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"The microcontroller"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"80 RON"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/lcds/1311-modul-lcd-spi-de-18-128x160.html?search_query=0104110000012661&results=1",children:"ST7735R Display"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"OLED visual interface"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"29 RON"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"https://www.emag.ro/amplificator-audio-max98357-i2s-compatibil-cu-esp32-si-raspberry-pi-emg238/pd/DVYJWJYBM/?ref=history-shopping_418527241_221614_1",children:"MAX98357 I2S DAC"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Audio output module"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"24 RON"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"https://www.emag.ro/difuzor-mini-arduino-3w-4-ohm-40mm-diametru-z001351/pd/DX2RLHYBM/?ref=history-shopping_418528639_187129_1",children:"4 Ohm Speaker"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Sound playback"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"40 RON"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Consumables (buttons, potentiometers, wires, etc.)"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Various components"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"50 RON"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"software",children:"Software"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Library"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Usage"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"https://embassy.dev/",children:"embassy"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Asynchronous embedded framework for Rust"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Core framework for running async tasks on the Raspberry Pi Pico 2"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"https://embassy.dev/",children:"embassy-rp"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Embassy HAL for RP2040"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Hardware abstraction layer for the Raspberry Pi Pico 2"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"https://github.com/rust-embedded/embedded-hal",children:"embedded-hal"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Hardware Abstraction Layer (HAL) traits"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Provides unified interfaces for hardware drivers"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"https://github.com/embedded-graphics/embedded-graphics",children:"embedded-graphics"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"2D graphics library"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Used for drawing to the ST7735R display"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"https://github.com/almindor/st7735-lcd",children:"st7735-lcd"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Rust driver for ST7735 display"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Controls the ST7735R display"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"links",children:"Links"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://example.com",children:"link1"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://example.com",children:"link2"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},76217:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/cratedigger_diagram-8c9f2174561eba3654e55339dd0d1e49.webp"},42737:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/cratedigger_schematic-e1de5b96df30b828c55cc8b772079616.webp"},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>c});var s=n(96540);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);