"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1782],{48224:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>o,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"project/2025/mircea.tusca/index","title":"Rust-Embedded Weather Station","description":"Author: Tusca Mircea \\\\","source":"@site/versioned_docs/version-acs_cc/project/2025/mircea.tusca/index.md","sourceDirName":"project/2025/mircea.tusca","slug":"/project/2025/mircea.tusca/","permalink":"/docs/acs_cc/project/2025/mircea.tusca/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-acs_cc/project/2025/mircea.tusca/index.md","tags":[],"version":"acs_cc","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Candy sorter","permalink":"/docs/acs_cc/project/2025/mihnea.sandulache/"},"next":{"title":"Snake","permalink":"/docs/acs_cc/project/2025/nicolae.dragu/"}}');var r=s(74848),i=s(28453);const l={},d="Rust-Embedded Weather Station",a={},c=[{value:"1. Functional Description",id:"1-functional-description",level:2},{value:"2. Motivation",id:"2-motivation",level:2},{value:"3. System Architecture",id:"3-system-architecture",level:2},{value:"Subsystems",id:"subsystems",level:3},{value:"microSD SPI Module",id:"microsd-spi-module",level:3},{value:"Data Flow",id:"data-flow",level:3},{value:"4 Hardware Components",id:"4-hardware-components",level:2},{value:"Bill of Materials",id:"bill-of-materials",level:2},{value:"Software",id:"software",level:2}];function h(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"rust-embedded-weather-station",children:"Rust-Embedded Weather Station"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Author:"})," Tusca Mircea ",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"GitHub Project Link"}),": ",(0,r.jsx)(t.a,{href:"https://github.com/UPB-PMRust-Students/proiect-mtusca",children:"Weather Station"})]})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"1-functional-description",children:"1. Functional Description"}),"\n",(0,r.jsx)(t.p,{children:"The Rust-Embedded Weather Station is a compact, battery-powered device built on the RP2040 microcontroller that continuously monitors key environmental parameters. It reads:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Temperature & Humidity"})," via a DHT22 sensor"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Atmospheric Pressure"})," via a BMP280 sensor"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Ambient Light Level"})," via a BH1750 sensor"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Air Quality"})," (volatile compounds proxy) via an MQ-135 gas sensor"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"All sensor data are acquired asynchronously using the Embassy framework, processed on-board, and displayed in real time on a 0.96\u2033 SSD1306 OLED screen."}),"\n",(0,r.jsx)(t.h2,{id:"2-motivation",children:"2. Motivation"}),"\n",(0,r.jsx)(t.p,{children:"The motivation for this project was the desire to create a device that would be useful in daily life and that will operate with a lot of data,\r\ngiving the posibility of exploring how different sensors work with each other and how the data could be managed and used inside the software."}),"\n",(0,r.jsx)(t.h2,{id:"3-system-architecture",children:"3. System Architecture"}),"\n",(0,r.jsxs)(t.p,{children:["The overall system is organized into three main subsystems\u2014",(0,r.jsx)(t.strong,{children:"Sensing"}),", ",(0,r.jsx)(t.strong,{children:"Processing"}),", and ",(0,r.jsx)(t.strong,{children:"Output"}),"\u2014all coordinated by the RP2040 microcontroller running Rust/Embassy firmware."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Diagram",src:s(17252).A+""})}),"\n",(0,r.jsx)(t.h3,{id:"subsystems",children:"Subsystems"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Sensing Subsystem"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"DHT22"})," (temperature & humidity): single-wire digital interface"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"BMP280"})," (pressure): I\xb2C bus"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"BH1750"})," (light): I\xb2C bus"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"MQ-135"})," (air quality): analog voltage via ADC"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Processing Subsystem (RP2040 + Embassy)"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Async executor"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Sensor-reader tasks"})," (one per sensor), each sampling on its own schedule"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Inter-task channels"})," (",(0,r.jsx)(t.code,{children:"embassy_sync::channel"}),") to serialize and buffer readings"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Data formatting"})," (convert raw counts/voltages into human-readable units)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The HC-06 is a serial-port-profile (SPP) Bluetooth 2.0 module that acts as a wireless UART slave. It\u2019s ideal for streaming sensor data to a phone or PC:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Supply voltage:"})," 3.3 V\u20136 V (power from the USB 5 V rail is fine)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Logic level:"})," 3.3 V on TX/RX"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Default baud rate:"})," 9600 bps (configurable via AT commands)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Pins:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"VCC \u2192 5 V (USB)"}),"\n",(0,r.jsx)(t.li,{children:"GND \u2192 GND"}),"\n",(0,r.jsx)(t.li,{children:"TX \u2192 RP2040 RX"}),"\n",(0,r.jsx)(t.li,{children:"RX \u2192 RP2040 TX"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"microsd-spi-module",children:"microSD SPI Module"}),"\n",(0,r.jsx)(t.p,{children:"This breakout makes adding removable flash storage trivial via the RP2040\u2019s SPI peripheral:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Interface:"})," SPI (CS, SCK, MOSI, MISO)"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Supply & level shifting:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"VCC accepts 5 V (on-board regulator \u2192 3.3 V)"}),"\n",(0,r.jsx)(t.li,{children:"Logic-level shifters on data lines"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Supported cards:"})," microSD / SDHC up to 32 GB (Class 10 recommended)"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Pins:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"GND \u2192 GND"}),"\n",(0,r.jsx)(t.li,{children:"VCC \u2192 5 V (USB)"}),"\n",(0,r.jsx)(t.li,{children:"CS  \u2192 any free GPIO"}),"\n",(0,r.jsx)(t.li,{children:"SCK \u2192 SPI0_SCK"}),"\n",(0,r.jsx)(t.li,{children:"MOSI \u2192 SPI0_MOSI"}),"\n",(0,r.jsx)(t.li,{children:"MISO \u2192 SPI0_MISO"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Output Subsystem"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"SSD1306 OLED"}),": I\xb2C display task subscribes to the channel of aggregated reading"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"data-flow",children:"Data Flow"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Sensor sampling"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Each sensor-task wakes on a timer, performs its read (I\xb2C transaction or ADC conversion), then packages a measurement struct."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Channel exchange"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Measurement structs are sent into a bounded Embassy channel, decoupling sampling rate from display refresh."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Aggregation & formatting"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"A dedicated \u201cdisplay\u201d task collects the latest value from each sensor channel, formats strings (\u201cT=23.5 \xb0C\u201d, \u201cRH=45 %\u201d, etc.)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Display update"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The display task issues I\xb2C write sequences to the SSD1306, refreshing the on-screen dashboard at a fixed interval (e.g. 1 Hz)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"4-hardware-components",children:"4 Hardware Components"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"RP2040-Zero"}),": Dual-core ARM Cortex-M0+ microcontroller running the Rust/Embassy firmware; orchestrates sensor reads, data processing, and I/O."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"DHT22 (AM2302)"}),": Single-wire digital sensor for temperature (\xb10.5 \xb0C) and humidity (\xb12 % RH), updates every \u22652 s."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"BMP280"}),": I\xb2C barometric pressure and temperature sensor; provides high-resolution pressure (Pa) and temperature (\xb0C) readings."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"BH1750"}),": I\xb2C ambient light sensor; measures illuminance in lux for display and adaptive logic."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"MQ-135"}),": Analog gas sensor; outputs voltage via ADC proportional to air-quality (volatile compounds proxy)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"SSD1306 OLED (0.96\u2033)"}),": I\xb2C monochrome display; renders real-time text/graphics of sensor values at ~1 Hz."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"microSD SPI Module"}),": SPI flash storage breakout; logs timestamped CSV sensor data to a microSD card."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"HC-06 Bluetooth Module"}),": UART SPP slave device; streams ASCII-formatted sensor readings over Bluetooth at a default 9600 bps."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Device"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Usage"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Price"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"RP2040-Zero development board"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Main MCU"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://sigmanortec.ro/en/development-board-with-raspberry-rp2040-cortex-m0-2mb-flash",children:"7.88 \u20ac"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"DHT22 AM2302 sensor"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Temperature & humidity measurement"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://sigmanortec.ro/en/temperature-and-humidity-sensor-dht22-am2302-original-module",children:"8.54 \u20ac"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"BMP280 pressure/temperature sensor"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Barometric pressure & temperature"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://sigmanortec.ro/it/sensore-bmp280-pressione-atmosferica-temperatura-33-v",children:"2.01 \u20ac"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"BH1750 GY-302 light sensor"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Ambient illuminance measurement"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://www.sigmanortec.ro/en/light-intensity-sensor-gy-302-bh1750",children:"10.40 \u20ac"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"MQ-135 air-quality sensor"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Analog proxy for air pollution"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://sigmanortec.ro/en/sensore-di-qualita-aria-mq-135",children:"2.73 \u20ac"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"0.96\u2033 SSD1306 OLED display"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"I\xb2C visual interface for readings"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://sigmanortec.ro/it/display-oled-096-i2c-iic-bianco",children:"4.10 \u20ac"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"MicroSD SPI Data Logger module"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Logs CSV data to microSD via SPI"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://sigmanortec.ro/en/microsd-module",children:"4.08 \u20ac"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Patriot microSDHC 16 GB, Class 10"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Storage medium for logged data"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://www.emag.ro/card-microsd-patriot-16-gb-clasa-10-psf16gmdc10/pd/DRQQHXMBM/",children:"18.80 Lei"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"HC-06 Bluetooth module"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Streams data over UART \u2192 Bluetooth"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://www.sigmanortec.ro/en/bluetooth-module-hc-06",children:"6.88 \u20ac"})})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"software",children:"Software"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Crate / Library"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Usage in Project"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://embassy.dev/",children:"embassy"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Asynchronous embedded framework"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Core async executor and timer scheduling"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://crates.io/crates/embassy-rp",children:"embassy-rp"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"RP2040 Hardware Abstraction Layer (HAL)"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"GPIO, I\xb2C, SPI, ADC drivers for the RP2040"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://github.com/rust-embedded/embedded-hal",children:"embedded-hal"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"HAL traits"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Unified hardware driver interfaces"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://crates.io/crates/dht-sensor",children:"dht-sensor"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"DHT22 driver"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Reads temperature & humidity from the DHT22"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://crates.io/crates/bmp280-ehal",children:"bmp280-ehal"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"BMP280 driver"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Interfaces with the BMP280 over I\xb2C"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://crates.io/crates/bh1750",children:"bh1750"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"BH1750 driver"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Interfaces with the BH1750 light sensor"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://crates.io/crates/ssd1306",children:"ssd1306"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"SSD1306 OLED driver"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Controls text/graphics on the 0.96\u2033 I\xb2C OLED"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://github.com/embedded-graphics/embedded-graphics",children:"embedded-graphics"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"2D graphics library"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Renders fonts and simple graphics on the OLED"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://github.com/rust-embedded-community/embedded-sdmmc",children:"embedded-sdmmc"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"FAT filesystem support for SD cards"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Manages file I/O (CSV logs) on the microSD card"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.a,{href:"https://crates.io/crates/heapless",children:"heapless"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"No-std data structures"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Buffers sensor data and display frames without allocator"})]})]})]})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},17252:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/diagram-3888d839a95afa0d53c8c5e62f820a4b.svg"},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>d});var n=s(96540);const r={},i=n.createContext(r);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);